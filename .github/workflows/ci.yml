name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - php: 8.1
            laravel: ^10.0
          - php: 8.2
            laravel: ^10.0
          - php: 8.2
            laravel: ^11.0
          - php: 8.3
            laravel: ^10.0
          - php: 8.3
            laravel: ^11.0

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: pdo, pdo_mysql, pdo_sqlite
        coverage: none

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.json') }}-${{ matrix.php }}
        restore-keys: composer-

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run PHPUnit tests
      run: vendor/bin/phpunit

    - name: Validate package structure
      run: |
        echo "Validating package structure..."
        # Check that all required files exist
        [ -f "src/ModelSchemaCheckerServiceProvider.php" ] && echo "✅ Service Provider exists" || (echo "❌ Service Provider missing" && exit 1)
        [ -d "src/Commands" ] && echo "✅ Commands directory exists" || (echo "❌ Commands directory missing" && exit 1)
        [ -f "src/Commands/ModelSchemaCheckCommand.php" ] && echo "✅ Main command exists" || (echo "❌ Main command missing" && exit 1)
        echo "✅ Package structure validation passed"

    - name: Test composer.json validity
      run: composer validate --strict --no-check-all

    - name: Test package can be installed
      run: |
        echo "Testing package installation compatibility..."
        # Test that composer can resolve dependencies without conflicts
        composer show --available ndestates/laravel-model-schema-checker 2>/dev/null || echo "Package not yet published (expected in CI)"
        echo "✅ Composer resolution test passed"

  publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: pdo, pdo_mysql, pdo_sqlite

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.json') }}-publish

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Validate composer.json
      run: composer validate --strict

    - name: Validate tag matches composer.json version
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
        COMPOSER_VERSION=$(php -r "echo json_decode(file_get_contents('composer.json'), true)['version'] ?? 'none';")
        if [ "$COMPOSER_VERSION" != "none" ] && [ "$TAG_VERSION" != "$COMPOSER_VERSION" ]; then
          echo "❌ Tag version ($TAG_VERSION) does not match composer.json version ($COMPOSER_VERSION)"
          exit 1
        fi
        echo "✅ Version validation passed"

    - name: Test published package
      run: |
        echo "Testing published package installation..."
        # Extract version from tag (remove 'v' prefix if present)
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        else
          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
        fi
        
        echo "Testing package version: $VERSION"
        
        # Test that the published package can be found and installed
        if composer show ndestates/laravel-model-schema-checker:$VERSION --available 2>/dev/null; then
          echo "✅ Published package version $VERSION is available on Packagist"
        else
          echo "❌ Published package version $VERSION not found on Packagist"
          echo "This may take a few minutes after publishing"
          # Don't fail here as Packagist indexing can be delayed
        fi

        # Test basic composer resolution
        if composer require ndestates/laravel-model-schema-checker:$VERSION --dry-run --no-scripts --quiet 2>/dev/null; then
          echo "✅ Package dependencies can be resolved"
        else
          echo "❌ Package dependency resolution failed"
          exit 1
        fi

    - name: Publish to Packagist
      if: success()
      env:
        PACKAGIST_USERNAME: ${{ secrets.PACKAGIST_USERNAME }}
        PACKAGIST_API_TOKEN: ${{ secrets.PACKAGIST_API_TOKEN }}
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        else
          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
        fi
        
        echo "Publishing version: $VERSION"

        # Check if Packagist credentials are available
        if [ -z "$PACKAGIST_USERNAME" ] || [ -z "$PACKAGIST_API_TOKEN" ]; then
          echo "Packagist credentials not configured. Skipping Packagist update."
          echo "Package will be auto-discovered by Packagist when the tag is pushed."
          exit 0
        fi

        # Use Packagist API to update package
        echo "Updating package on Packagist..."
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d "{\"repository\":{\"url\":\"https://github.com/${{ github.repository }}\"}}" \
          "https://packagist.org/api/update-package?username=$PACKAGIST_USERNAME&apiToken=$PACKAGIST_API_TOKEN")

        # Extract HTTP status code
        HTTP_CODE=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        RESPONSE_BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')

        echo "Packagist API Response Code: $HTTP_CODE"
        echo "Packagist API Response Body: $RESPONSE_BODY"

        # Check if the request was successful (HTTP 200-299 range)
        if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
          echo "✅ Successfully triggered Packagist update"
          # Check for success message in response
          if echo "$RESPONSE_BODY" | grep -q '"status":"success"' || echo "$RESPONSE_BODY" | grep -q '"success":true'; then
            echo "✅ Packagist confirmed successful update"
          else
            echo "ℹ️  Packagist update triggered (response may vary)"
          fi
        else
          echo "⚠️  Packagist API returned HTTP $HTTP_CODE"
          echo "⚠️  Response: $RESPONSE_BODY"
          echo "ℹ️  Package should still be auto-discovered by Packagist"
          # Don't fail the build - auto-discovery will handle it
        fi
