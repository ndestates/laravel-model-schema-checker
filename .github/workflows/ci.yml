name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - php: 8.1
            laravel: ^10.0
          - php: 8.2
            laravel: ^10.0
          - php: 8.2
            laravel: ^11.0
          - php: 8.3
            laravel: ^10.0
          - php: 8.3
            laravel: ^11.0

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: pdo, pdo_mysql, pdo_sqlite
        coverage: none

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.json') }}-${{ matrix.php }}
        restore-keys: composer-

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create test Laravel project
      run: |
        composer create-project laravel/laravel test-project ${{ matrix.laravel }} --prefer-dist --no-progress --no-scripts --no-dev
        cd test-project
        composer config repositories.local path ../
        composer require ndestates/laravel-model-schema-checker *@dev --no-scripts

    - name: Setup Laravel application
      run: |
        cd test-project
        cp .env.example .env || echo "APP_KEY=" > .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=\/home\/runner\/work\/laravel-model-schema-checker\/laravel-model-schema-checker\/test-project\/database\/database.sqlite/' .env
        php artisan key:generate --no-interaction --force
        touch database/database.sqlite

    - name: Run basic check
      run: |
        cd test-project
        php artisan --version

    - name: Run full validation
      run: |
        cd test-project
        php vendor/ndestates/laravel-model-schema-checker/check.php --dry-run

    - name: CodeQL Analysis (Security Scan)
      uses: github/codeql-action@v3
      with:
        languages: php

  publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: pdo, pdo_mysql, pdo_sqlite

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.json') }}-publish

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Validate composer.json
      run: composer validate --strict

    - name: Validate tag matches composer.json version
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
        COMPOSER_VERSION=$(php -r "echo json_decode(file_get_contents('composer.json'), true)['version'] ?? 'none';")
        if [ "$COMPOSER_VERSION" != "none" ] && [ "$TAG_VERSION" != "$COMPOSER_VERSION" ]; then
          echo "❌ Tag version ($TAG_VERSION) does not match composer.json version ($COMPOSER_VERSION)"
          exit 1
        fi
        echo "✅ Version validation passed"

    - name: Test package installation
      run: |
        echo "Testing package installation..."
        # Create a temporary Laravel project to test installation
        composer create-project laravel/laravel test-install --prefer-dist --no-progress --no-scripts --quiet
        cd test-install
        composer config repositories.local path ../
        composer require ndestates/laravel-model-schema-checker *@dev --no-scripts --quiet
        echo "✅ Package installation successful"

    - name: Publish to Packagist
      if: success()
      env:
        PACKAGIST_USERNAME: ${{ secrets.PACKAGIST_USERNAME }}
        PACKAGIST_API_TOKEN: ${{ secrets.PACKAGIST_API_TOKEN }}
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        echo "Publishing version: $VERSION"

        # Check if Packagist credentials are available
        if [ -z "$PACKAGIST_USERNAME" ] || [ -z "$PACKAGIST_API_TOKEN" ]; then
          echo "Packagist credentials not configured. Skipping Packagist update."
          echo "Package will be auto-discovered by Packagist when the tag is pushed."
          exit 0
        fi

        # Use Packagist API to update package
        echo "Updating package on Packagist..."
        RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d "{\"repository\":{\"url\":\"https://github.com/${{ github.repository }}\"}}" \
          "https://packagist.org/api/update-package?username=$PACKAGIST_USERNAME&apiToken=$PACKAGIST_API_TOKEN")

        # Check if the request was successful
        if echo "$RESPONSE" | grep -q '"status":"success"'; then
          echo "✅ Successfully updated package on Packagist"
        else
          echo "⚠️  Packagist update response: $RESPONSE"
          echo "Package should still be auto-discovered by Packagist"
        fi
