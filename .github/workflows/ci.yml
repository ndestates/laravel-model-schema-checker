name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - php: 8.1
            laravel: ^10.0
          - php: 8.2
            laravel: ^10.0
          - php: 8.2
            laravel: ^11.0
          - php: 8.3
            laravel: ^10.0
          - php: 8.3
            laravel: ^11.0

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: pdo, pdo_mysql, pdo_sqlite
        coverage: none

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.json') }}-${{ matrix.php }}
        restore-keys: composer-

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run PHPUnit tests
      run: vendor/bin/phpunit

    - name: Validate package structure
      run: |
        echo "Validating package structure..."
        # Check that all required files exist
        [ -f "src/ModelSchemaCheckerServiceProvider.php" ] && echo "✅ Service Provider exists" || (echo "❌ Service Provider missing" && exit 1)
        [ -d "src/Commands" ] && echo "✅ Commands directory exists" || (echo "❌ Commands directory missing" && exit 1)
        [ -f "src/Commands/ModelSchemaCheckCommand.php" ] && echo "✅ Main command exists" || (echo "❌ Main command missing" && exit 1)
        echo "✅ Package structure validation passed"

    - name: Test composer.json validity
      run: composer validate --strict --no-check-all

    - name: Test package in Laravel project
      run: |
        echo "Testing package in Laravel project..."
        # Create a Laravel project for testing
        composer create-project laravel/laravel test-app --prefer-dist --no-progress --no-scripts --quiet
        cd test-app
        
        # Configure Laravel
        cp .env.example .env 2>/dev/null || echo "APP_KEY=" > .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=database\/database.sqlite/' .env
        mkdir -p database
        touch database/database.sqlite
        
        # Generate application key
        php artisan key:generate --no-interaction --force
        
        # Install the package from local repository
        composer config repositories.local path ../
        composer require ndestates/laravel-model-schema-checker *@dev --no-scripts --quiet
        
        # Test that the artisan command is registered
        if php artisan list | grep -q "model:schema-check"; then
          echo "✅ Artisan command 'model:schema-check' registered"
        else
          echo "❌ Artisan command 'model:schema-check' not registered"
          exit 1
        fi
        
        # Test that the command can run (basic functionality)
        if php artisan model:schema-check --help > /dev/null 2>&1; then
          echo "✅ Command help works"
        else
          echo "❌ Command help failed"
          exit 1
        fi
        
        echo "✅ Package integration test passed"

    - name: CodeQL Analysis (Security Scan)
      uses: github/codeql-action@v3
      with:
        languages: php

  publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: pdo, pdo_mysql, pdo_sqlite

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.json') }}-publish

    - name: Install dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Validate composer.json
      run: composer validate --strict

    - name: Validate tag matches composer.json version
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
        COMPOSER_VERSION=$(php -r "echo json_decode(file_get_contents('composer.json'), true)['version'] ?? 'none';")
        if [ "$COMPOSER_VERSION" != "none" ] && [ "$TAG_VERSION" != "$COMPOSER_VERSION" ]; then
          echo "❌ Tag version ($TAG_VERSION) does not match composer.json version ($COMPOSER_VERSION)"
          exit 1
        fi
        echo "✅ Version validation passed"

    - name: Test published package
      run: |
        echo "Testing published package..."
        # Create a Laravel project for testing the published package
        composer create-project laravel/laravel test-published --prefer-dist --no-progress --no-scripts --quiet
        cd test-published
        
        # Configure Laravel
        cp .env.example .env 2>/dev/null || echo "APP_KEY=" > .env
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=database\/database.sqlite/' .env
        mkdir -p database
        touch database/database.sqlite
        
        # Generate application key
        php artisan key:generate --no-interaction --force
        
        # Install the published package
        VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        composer require ndestates/laravel-model-schema-checker:$VERSION --no-scripts --quiet
        
        # Test that the artisan command is registered
        if php artisan list | grep -q "model:schema-check"; then
          echo "✅ Published artisan command 'model:schema-check' registered"
        else
          echo "❌ Published artisan command 'model:schema-check' not registered"
          exit 1
        fi
        
        # Test basic command functionality
        if php artisan model:schema-check --help > /dev/null 2>&1; then
          echo "✅ Published command help works"
        else
          echo "❌ Published command help failed"
          exit 1
        fi
        
        # Test that the command can run (with dry-run to avoid actual operations)
        if php artisan model:schema-check --dry-run > /dev/null 2>&1; then
          echo "✅ Published command runs successfully"
        else
          echo "❌ Published command failed to run"
          exit 1
        fi
        
        echo "✅ Published package test passed"

    - name: Publish to Packagist
      if: success()
      env:
        PACKAGIST_USERNAME: ${{ secrets.PACKAGIST_USERNAME }}
        PACKAGIST_API_TOKEN: ${{ secrets.PACKAGIST_API_TOKEN }}
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        echo "Publishing version: $VERSION"

        # Check if Packagist credentials are available
        if [ -z "$PACKAGIST_USERNAME" ] || [ -z "$PACKAGIST_API_TOKEN" ]; then
          echo "Packagist credentials not configured. Skipping Packagist update."
          echo "Package will be auto-discovered by Packagist when the tag is pushed."
          exit 0
        fi

        # Use Packagist API to update package
        echo "Updating package on Packagist..."
        RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d "{\"repository\":{\"url\":\"https://github.com/${{ github.repository }}\"}}" \
          "https://packagist.org/api/update-package?username=$PACKAGIST_USERNAME&apiToken=$PACKAGIST_API_TOKEN")

        # Check if the request was successful
        if echo "$RESPONSE" | grep -q '"status":"success"'; then
          echo "✅ Successfully updated package on Packagist"
        else
          echo "⚠️  Packagist update response: $RESPONSE"
          echo "Package should still be auto-discovered by Packagist"
        fi
